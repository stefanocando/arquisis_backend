version: '3.8'

services:
  postgres:
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_PASSWORD=12345678
      - POSTGRES_USER=legitbusiness
      - POSTGRES_DB=legitbusiness_db
    ports:
      - 5432:5432
    networks:
      - shared-network
    volumes:
      - postgres_db:/var/lib/postgresql/data

  Server:
    container_name: server-ticketseller
    restart: unless-stopped
    image: server-ticketseller-dev:1.0.0
    build:
      context: Server
      target: development
      dockerfile: Dockerfile
    environment:
     - DB_USER=legitbusiness
     - DB_NAME=legitbusiness_db
     - DB_PASSWORD=12345678
     - DB_HOST=postgres
    ports:
      - 8080:8080
    networks:
      - shared-network
    depends_on:
      - postgres

  mqtt:
    container_name: mqtt-ticketseller
    image: mqtt-ticketseller-dev:1.0.0
    build: 
      context: ./
      dockerfile: Dockerfile
    networks:
      - shared-network
    volumes:
      - postgres_db:/var/lib/postgresql/data
    depends_on:
      - Server
    
  MqttServer:
    container_name: mqtt-server-ticketseller
    restart: unless-stopped
    image: mqtt-server-ticketseller-dev:1.0.0
    build:
      context: mqtt_publisher
      dockerfile: Dockerfile
    ports:
      - 9000:9000
    networks:
      - shared-network
    volumes:
      - postgres_db:/var/lib/postgresql/data
    depends_on:
      - Server

  MqttRequests:
    container_name: mqtt_requests
    restart: unless-stopped
    image: mqtt-requests-listener-dev:1.0.0
    build:
      context: ./mqtt_requests
      dockerfile: Dockerfile
    networks:
      - shared-network
    volumes:
      - postgres_db:/var/lib/postgresql/data
    depends_on:
      - Server

  MqttValidations:
    container_name: mqtt_validations
    restart: unless-stopped
    image: mqtt-validations-listener-dev:1.0.0
    build:
      context: ./mqtt_validations
      dockerfile: Dockerfile
    networks:
      - shared-network
    volumes:
      - postgres_db:/var/lib/postgresql/data
    depends_on:
      - Server
  
  workers:
    build:
      context: ./workers_service/workers
      dockerfile: Dockerfile
    networks:
      - shared-network
    deploy:
      replicas: 3
  
  redis:
    image: redis
    container_name: redis
    command: redis-server
    ports:
      - "6379:6379"
    networks:
      - shared-network
  
  board:
    build:
      context: ./workers_service/api
      dockerfile: Dockerfile
    networks:
      - shared-network
    ports:
      - "3000:3000"
    

networks:
  shared-network:
    driver: bridge
volumes:
  postgres_db: